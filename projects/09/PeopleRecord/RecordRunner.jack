class RecordRunner {

    field int ARRAY_SIZE;
    field Array label;
    field Array students;
    field int arrayIndex;


    constructor RecordRunner new(){
        let ARRAY_SIZE = 3;
        let arrayIndex = 0;
        let label = Array.new(3);
        let label[0] = "Name: ";
        let label[1] = "Age: ";
        let label[2] = "Sex: ";
        let students = Array.new(ARRAY_SIZE);
        //instantiate students
        do intantiateStudents();
        //
        do displaySavedProfiles();
        do showProgramInstructions();
        return this;
    }

    method void run(){

      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;

      while (~exit) {
         let key = Keyboard.keyPressed();
         if (key = 140) { //escpape
            let exit = true;
         }
         if (key = 131) { //up arrow
             do programMode("Insert");
             if(arrayIndex < ARRAY_SIZE){
                do receiveStudentInformation();       
             }             
             do programMode("");       
         } 
         if( key = 129){ //backspace
             do programMode("Delete");
             do deleteRecord();
             do programMode("");       
         }    
      } 
      return;
    }

    method void receiveStudentInformation(){
        var int counter, emptySlotIndex;
        var String str;    
        var Student student;     
        let str = String.new(40); 
        let counter = 0;    
        let arrayIndex = getEmptySlot(); 
        let student = students[arrayIndex];
        while (counter < 3){
            do clearLineFromCursor(3, 0);    
            let str = Keyboard.readLine(label[counter]);
            if(counter = 0){                 
                //char 131 - which signals a new insert operation is taking place - will always be prepended on str. - remove it
                if(str.length() > 1){
                    do str.setCharAt(0, ""); 
                    do student.setName(str);
                } else {
                    do student.setName("");
                }            
            }
            if(counter = 1){
                do student.setAge(str);
            }
            if(counter = 2){
                do student.setSex(str);
                //save new student when all fields are saved                                                                        
                do displaySavedProfiles();  
                do clearLineFromCursor(3, 0); //clear input prompt
            }        
            let counter = (counter + 1);     
            let str = "";  
        }
        return;
    }

    method void deleteRecord(){
        var int id, counter;
        var Student student;
        var boolean isFound;
        let counter = 0;
        let isFound = false;    
        do Keyboard.readInt("");
        let id = Keyboard.readInt("Record id: ");
        let id = (id - 1); //the id is always one more than the array index
        if((id < 0) | (id > (ARRAY_SIZE -1))){
            do showMessage("ERROR: Invalid index ");
            do Output.printInt(id);
        } else {
            let counter = 0;            
            while ((counter < ARRAY_SIZE) & ~(isFound)){   
                let student = students[counter];
                if(student.getId() = id){
                    let isFound = true;
                    do student.dispose();
                    let student = Student.new(counter, "", "", "");
                    let students[counter] = student;        
                }                 
                let counter = (counter + 1);
            }
            if(~(isFound)){
                do showMessage("ERROR: No record is found.");
            } else {
                do displaySavedProfiles();      
            }
        }
        return;
    }

    method void clearLineFromCursor(int row, int column){
        var int remainingChars;
        var int counter;
        //calculate the remaining no. of characters till the end of line
        let remainingChars = (64 - column);
        let counter = 0;
        do Output.moveCursor(row, 63);
        while (counter < remainingChars){
            do Output.backSpace();
            let counter = (counter + 1);
        }    
        do Output.moveCursor(row, column); 
        return;
    }

    method void showMessage(String message){
        do clearMessage();
        do Output.printString(message);
        return;
    }

    method void clearMessage(){
        do clearLineFromCursor(1, 30);    
        return;
    }

    method void showProgramInstructions(){
        do clearLineFromCursor(21, 0);
        do Output.printString("===============================================================");
        do Output.println();
        do Output.printString("Up arrow: Insert mode, Backspace: Delete mode, ESC: exit");
        return;
    }

    method void programMode(String mode){
        do clearLineFromCursor(0, 0); 
        do Output.printString("Mode: ");
        do Output.printString(mode);
        return;
    }

    method void displaySavedProfiles(){
        var int counter, total, row, serialNumber;
        var int offset;
        var Student std;
        
        do Output.moveCursor(8, 0);
        do Output.printString("---------------------SAVED-RECORDS-----------------------------"); 
        do Output.println();
        do displayFormattedRow(10, -1, "Name", "Sex", "Age");
        do Output.println();
        let counter = 0;        
        let offset = 11;
        do Output.moveCursor(offset, 0);
        while (counter < ARRAY_SIZE){
            do clearLineFromCursor((counter + offset), 0);
            let std = students[counter];
            let row = counter + offset;
            let serialNumber = std.getId()+1;
            do displayFormattedRow(row, serialNumber, std.getName(), std.getSex(), std.getAge());    
            let counter = (counter + 1);
        } 
        let total = countNonEmpty();
        if(total = ARRAY_SIZE){                   
            do showMessage("WARNING: Maximum records reached.");
        } else {
            do clearMessage();
        } 
        return;
    }

    method void intantiateStudents(){
        var int counter;
        var Student student;
        let counter = 0;    
        while (counter < ARRAY_SIZE){
            let student = Student.new(counter, "", "", "");
            let students[counter] = student;        
            let counter = counter + 1;
        }
        return;
    }

    method int countNonEmpty(){
        var int records, index;
        var boolean isEmpty;
        var Student student;
        let records = 0;
        let index = 0;
        while (index < ARRAY_SIZE){
            let student = students[index];
            let isEmpty = student.isEmpty();
            if(~isEmpty){
                let records = records + 1;
            }
            let index = index + 1;
        }
        return records;
    }

    method int getEmptySlot(){
        var int index;
        var boolean isEmpty;
        var Student student;
        let index = 0;
        while (index < ARRAY_SIZE){
            let student = students[index];
            let isEmpty = student.isEmpty();
            if(isEmpty){
                return index;
            }
            let index = index + 1;
        }
        return (ARRAY_SIZE - 1);
    }

    //methods displays some like below
    // 1 | some_name     | 45 | M |
    method void displayFormattedRow(int row, int number, String name, String age, String sex){
        do Output.moveCursor(row, 0);
        if(number = -1){
            do Output.printString("");  
        } else {
            do Output.printInt(number); 
        }    
        do Output.moveCursor(row, 2);
        do Output.printString("| ");  
        do Output.printString(name);
        do Output.moveCursor(row, 30); 
        do Output.printString("| ");   
        do Output.printString(age);           
        do Output.moveCursor(row, 36); 
        do Output.printString("| ");  
        do Output.printString(sex);
        do Output.moveCursor(row, 42); 
        do Output.printString("| "); 
        do Output.println();
        return;
    }
}