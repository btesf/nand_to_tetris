// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decode to get an opcode
    Ng16(a=instruction, out=opCode);

    Mux16(a=instruction, b=aluOut, sel=opCode, out=mux1Out);
    //A-Register: is loaded when d1 (instruction[5]) is set or when opCode == 0 (in instruction mode)
    Not(in=opCode, out=notOpCode);
    Or(a=instruction[5], b=notOpCode, out=loadAReg);
    ARegister(in=mux1Out, load=loadAReg, out[0..14]=addressM, out=regAOut);

    //2nd Mux going into ALU: sel=a => instruction[12]
    Mux16(a=regAOut, b=inM, sel=instruction[12], out=mux2Out);

    //D-Register: load=d2 => instruction[4]
    DRegister(in=aluOut, load=instruction[4], out=regDOut);

    //ALU: zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6
    ALU(x=regDOut, y=mux2Out, zx=instruction[11] , nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],  zr=aluZr, ng=aluNg, out=aluOut, out=outM);
    
    //JMP logic
    Jmp(j1=instruction[2], j2=instruction[1], j3=instruction[0], zr=aluZr, ng=aluNg, out=jmpOut);
    //jmpOut value should be considred only in C-instruction mode (opcode = 1)
    And(a=jmpOut, b=opCode, out=load);
    //PC will be incremented if "load"(jump) signal is not set
    Not(in=load,out=inc);
    PC(in=regAOut,load=load,inc=inc,reset=reset, out[0..14]=pc);

    //writeM : only works if opCode is 1 (C-instruction) and if d3 (instruction[3]) is enabled
    And(a=opCode, b=instruction[3], out=writeM);
}