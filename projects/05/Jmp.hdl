/*
*  To complete this first a truth table containing j1, j2, j3, zr, ng is created (with 2^5 combinations)
* and then the unique places where out=1 is converted into boolean expression
* 
* |j1 |j2 |j3 |zr |ng |out|
* | 0 | 0 | 1 | 0 | 0 |   |
* | 0 | 0 | 1 | 1 | 0 |   |
* | 0 | 1 | 0 | 1 | 0 |   |
* | 0 | 1 | 0 | 1 | 1 |   |
* ...
* 
* The conditions where out will be true is shown in the picture "jump_conditions.jpg" in current folder.
* Then the ff. boolean expressions comes out for each jump types:
*     notJ1.notJ2.notJ3=<DO NOTHING>
*     notJ1.notJ2.j3.(notNg.notZr) = JGT
*     notJ1.j2.notJ3.zr=JEQ
*     notJ1.j2.j3.(notNg+zr)=JGE
*     j1.notJ2.notJ3.ng=JLT
*     j1.notJ2.j3.notZr.out=JNE
*     j1.j2.notJ3.(zr+ng)=JLE
*     j1.j2.j3=JMP
*/
CHIP Jmp {
    IN j1, j2, j3, zr, ng;
    OUT out;

    PARTS:
    Not(in=j1, out=notJ1);
    Not(in=j2, out=notJ2);
    Not(in=j3, out=notJ3);
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);

    And(a=notNg, b=notZr, out=andOut1);
    And4(a=notJ1, b=notJ2, c=j3, d=andOut1, out=JGT);
    And4(a=notJ1, b=j2, c=notJ3, d=zr, out=JEQ);
    Or(a=notNg, b=zr, out=orOut1);
    And4(a=notJ1, b=j2, c=j3, d=orOut1, out=JGE);
    And4(a=j1, b=notJ2, c=notJ3, d=ng, out=JLT);
    And4(a=j1, b=notJ2, c=j3, d=notZr, out=JNE);
    Or(a=zr, b=ng, out=outOut2);
    And4(a=j1, b=j2, c=notJ3, d=outOut2, out=JLE);
    And4(a=j1, b=j2, c=j3, d=true, out=JMP);

    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=out);
}